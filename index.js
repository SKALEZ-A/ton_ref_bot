
const { Telegraf } = require("telegraf");
const axios = require("axios");
const path = require("path");
const crypto = require("crypto");

const bot = new Telegraf("6809279648:AAH9CZQIpgeVKZWhg3o2zVv0awic9ArJW7Q");

const imagePath = (fileName) => path.join(__dirname, "images", fileName);

const registerUser = async (userId, username, inviterCode = "") => {
  try {
    const response = await axios.post("https://walledb.onrender.com/api/Cluster0/register", {
      userId,
      inviterCode,
      username,
    });
    return response.data;
  } catch (error) {
    console.error('Error registering user:', error.response?.data || error.message);
    throw error;
  }
};

bot.start(async (ctx) => {
  const userId = ctx.from.id;
  const username = ctx.from.username || `user${userId}`;
  let inviterCode = "";

  if (ctx.payload) {
    inviterCode = ctx.payload;
  } else if (ctx.message && ctx.message.text) {
    const parts = ctx.message.text.split(' ');
    if (parts.length > 1) {
      inviterCode = parts[1];
    }
  }

  console.log(`Inviter Code: ${inviterCode}`); // Log the inviterCode for debugging

  try {
    const registeredUser = await registerUser(userId, username, inviterCode);
    console.log(`Registered User: ${registeredUser}`); // Log registered user for debugging

    ctx.replyWithPhoto(
      { source: imagePath("description.jpg") },
      {
        caption: `*Welcome, @${username}! to Ton Diamond ðŸ’Ž*\n\nYou are now a Builder on Ton Blockchain and can be entitled to revenues generated by *Ton DiamondðŸ’ŽðŸ’Ž!!*`,
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [
              {
                text: "Play",
                web_app: { url: "https://walle-bot.vercel.app/" },
              },
              { text: "Join community", callback_data: "join_community" },
            ],
          ],
        },
      }
    );
  } catch (error) {
    ctx.reply('Welcome Back!');
  }
});

bot.launch();
